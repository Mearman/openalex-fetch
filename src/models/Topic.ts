/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Ids } from './Ids';
import {
    IdsFromJSON,
    IdsFromJSONTyped,
    IdsToJSON,
} from './Ids';
import type { TopicLevelArraySchema } from './TopicLevelArraySchema';
import {
    TopicLevelArraySchemaFromJSON,
    TopicLevelArraySchemaFromJSONTyped,
    TopicLevelArraySchemaToJSON,
} from './TopicLevelArraySchema';
import type { TopicLevelSchema } from './TopicLevelSchema';
import {
    TopicLevelSchemaFromJSON,
    TopicLevelSchemaFromJSONTyped,
    TopicLevelSchemaToJSON,
} from './TopicLevelSchema';

/**
 * 
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    citedByCount: any | null;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    createdDate: any | null;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    description: any | null;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    displayName: any | null;
    /**
     * 
     * @type {TopicLevelArraySchema}
     * @memberof Topic
     */
    domain: TopicLevelArraySchema;
    /**
     * 
     * @type {TopicLevelArraySchema}
     * @memberof Topic
     */
    field: TopicLevelArraySchema;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    id: any | null;
    /**
     * 
     * @type {Ids}
     * @memberof Topic
     */
    ids: Ids;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    keywords: any | null;
    /**
     * 
     * @type {TopicLevelSchema}
     * @memberof Topic
     */
    siblings: TopicLevelSchema;
    /**
     * 
     * @type {TopicLevelArraySchema}
     * @memberof Topic
     */
    subfield: TopicLevelArraySchema;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    updatedDate: any | null;
    /**
     * 
     * @type {any}
     * @memberof Topic
     */
    worksCount: any | null;
}

/**
 * Check if a given object implements the Topic interface.
 */
export function instanceOfTopic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "citedByCount" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "field" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "ids" in value;
    isInstance = isInstance && "keywords" in value;
    isInstance = isInstance && "siblings" in value;
    isInstance = isInstance && "subfield" in value;
    isInstance = isInstance && "updatedDate" in value;
    isInstance = isInstance && "worksCount" in value;

    return isInstance;
}

export function TopicFromJSON(json: any): Topic {
    return TopicFromJSONTyped(json, false);
}

export function TopicFromJSONTyped(json: any, ignoreDiscriminator: boolean): Topic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'citedByCount': json['cited_by_count'],
        'createdDate': json['created_date'],
        'description': json['description'],
        'displayName': json['display_name'],
        'domain': TopicLevelArraySchemaFromJSON(json['domain']),
        'field': TopicLevelArraySchemaFromJSON(json['field']),
        'id': json['id'],
        'ids': IdsFromJSON(json['ids']),
        'keywords': json['keywords'],
        'siblings': TopicLevelSchemaFromJSON(json['siblings']),
        'subfield': TopicLevelArraySchemaFromJSON(json['subfield']),
        'updatedDate': json['updated_date'],
        'worksCount': json['works_count'],
    };
}

export function TopicToJSON(value?: Topic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cited_by_count': value.citedByCount,
        'created_date': value.createdDate,
        'description': value.description,
        'display_name': value.displayName,
        'domain': TopicLevelArraySchemaToJSON(value.domain),
        'field': TopicLevelArraySchemaToJSON(value.field),
        'id': value.id,
        'ids': IdsToJSON(value.ids),
        'keywords': value.keywords,
        'siblings': TopicLevelSchemaToJSON(value.siblings),
        'subfield': TopicLevelArraySchemaToJSON(value.subfield),
        'updated_date': value.updatedDate,
        'works_count': value.worksCount,
    };
}

