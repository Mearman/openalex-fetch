/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LocationSource
 */
export interface LocationSource {
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    displayName?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    hostOrganization?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    hostOrganizationLineage?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    hostOrganizationLineageNames?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    hostOrganizationName?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    isInDoaj?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    isOa?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    issn?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    issnL?: any | null;
    /**
     * 
     * @type {any}
     * @memberof LocationSource
     */
    type?: any | null;
}

/**
 * Check if a given object implements the LocationSource interface.
 */
export function instanceOfLocationSource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationSourceFromJSON(json: any): LocationSource {
    return LocationSourceFromJSONTyped(json, false);
}

export function LocationSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'hostOrganization': !exists(json, 'host_organization') ? undefined : json['host_organization'],
        'hostOrganizationLineage': !exists(json, 'host_organization_lineage') ? undefined : json['host_organization_lineage'],
        'hostOrganizationLineageNames': !exists(json, 'host_organization_lineage_names') ? undefined : json['host_organization_lineage_names'],
        'hostOrganizationName': !exists(json, 'host_organization_name') ? undefined : json['host_organization_name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isInDoaj': !exists(json, 'is_in_doaj') ? undefined : json['is_in_doaj'],
        'isOa': !exists(json, 'is_oa') ? undefined : json['is_oa'],
        'issn': !exists(json, 'issn') ? undefined : json['issn'],
        'issnL': !exists(json, 'issn_l') ? undefined : json['issn_l'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function LocationSourceToJSON(value?: LocationSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display_name': value.displayName,
        'host_organization': value.hostOrganization,
        'host_organization_lineage': value.hostOrganizationLineage,
        'host_organization_lineage_names': value.hostOrganizationLineageNames,
        'host_organization_name': value.hostOrganizationName,
        'id': value.id,
        'is_in_doaj': value.isInDoaj,
        'is_oa': value.isOa,
        'issn': value.issn,
        'issn_l': value.issnL,
        'type': value.type,
    };
}

