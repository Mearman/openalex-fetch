/* tslint:disable */
/* eslint-disable */
/**
 * OpenAlex
 * ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It\'s named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutoCompleteResultSchema,
  ErrorMessage,
  Institution,
  Institutions,
} from '../models/index';
import {
    AutoCompleteResultSchemaFromJSON,
    AutoCompleteResultSchemaToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    InstitutionFromJSON,
    InstitutionToJSON,
    InstitutionsFromJSON,
    InstitutionsToJSON,
} from '../models/index';

export interface GetAutocompleteInstitutionsRequest {
    q?: string;
    userAgent?: string;
    mailto?: string;
}

export interface GetInstitutionRequest {
    id: string;
    select?: string;
    userAgent?: string;
    mailto?: string;
}

export interface GetInstitutionsRequest {
    apiKey?: string;
    cursor?: string;
    filter?: string;
    groupBy?: string;
    page?: number;
    perPage?: number;
    sample?: number;
    search?: string;
    seed?: any;
    select?: string;
    sort?: string;
    userAgent?: string;
    mailto?: string;
}

export interface GetRandomInstitutionRequest {
    select?: string;
    userAgent?: string;
    mailto?: string;
}

/**
 * InstitutionsApi - interface
 * 
 * @export
 * @interface InstitutionsApiInterface
 */
export interface InstitutionsApiInterface {
    /**
     * 
     * @summary /autocomplete/institutions
     * @param {string} [q] 
     * @param {string} [userAgent] [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
     * @param {string} [mailto] The API is the primary way to get OpenAlex data. It\&#39;s free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like &#x60;mailto:example@domain.com&#x60;, or in the User-Agent request header, like &#x60;User-Agent: my-app (mailto:example@domain.com)&#x60;. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiInterface
     */
    getAutocompleteInstitutionsRaw(requestParameters: GetAutocompleteInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoCompleteResultSchema>>;

    /**
     * 
     * /autocomplete/institutions
     */
    getAutocompleteInstitutions(requestParameters: GetAutocompleteInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoCompleteResultSchema>;

    /**
     * 
     * @summary /institutions/{id}
     * @param {string} id 
     * @param {string} [select] 
     * @param {string} [userAgent] [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
     * @param {string} [mailto] The API is the primary way to get OpenAlex data. It\&#39;s free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like &#x60;mailto:example@domain.com&#x60;, or in the User-Agent request header, like &#x60;User-Agent: my-app (mailto:example@domain.com)&#x60;. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiInterface
     */
    getInstitutionRaw(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institution>>;

    /**
     * 
     * /institutions/{id}
     */
    getInstitution(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institution>;

    /**
     * 
     * @summary /institutions
     * @param {string} [apiKey] 
     * @param {string} [cursor] 
     * @param {string} [filter] 
     * @param {string} [groupBy] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {number} [sample] 
     * @param {string} [search] 
     * @param {any} [seed] 
     * @param {string} [select] 
     * @param {string} [sort] 
     * @param {string} [userAgent] [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
     * @param {string} [mailto] The API is the primary way to get OpenAlex data. It\&#39;s free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like &#x60;mailto:example@domain.com&#x60;, or in the User-Agent request header, like &#x60;User-Agent: my-app (mailto:example@domain.com)&#x60;. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiInterface
     */
    getInstitutionsRaw(requestParameters: GetInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institutions>>;

    /**
     * 
     * /institutions
     */
    getInstitutions(requestParameters: GetInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institutions>;

    /**
     * Get a random institution
     * @summary /institutions/random
     * @param {string} [select] 
     * @param {string} [userAgent] [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
     * @param {string} [mailto] The API is the primary way to get OpenAlex data. It\&#39;s free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like &#x60;mailto:example@domain.com&#x60;, or in the User-Agent request header, like &#x60;User-Agent: my-app (mailto:example@domain.com)&#x60;. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiInterface
     */
    getRandomInstitutionRaw(requestParameters: GetRandomInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institution>>;

    /**
     * Get a random institution
     * /institutions/random
     */
    getRandomInstitution(requestParameters: GetRandomInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institution>;

}

/**
 * 
 */
export class InstitutionsApi extends runtime.BaseAPI implements InstitutionsApiInterface {

    /**
     * 
     * /autocomplete/institutions
     */
    async getAutocompleteInstitutionsRaw(requestParameters: GetAutocompleteInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoCompleteResultSchema>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['mailto'] != null) {
            queryParameters['mailto'] = requestParameters['mailto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        const response = await this.request({
            path: `/autocomplete/institutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoCompleteResultSchemaFromJSON(jsonValue));
    }

    /**
     * 
     * /autocomplete/institutions
     */
    async getAutocompleteInstitutions(requestParameters: GetAutocompleteInstitutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoCompleteResultSchema> {
        const response = await this.getAutocompleteInstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * /institutions/{id}
     */
    async getInstitutionRaw(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institution>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getInstitution().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['mailto'] != null) {
            queryParameters['mailto'] = requestParameters['mailto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        const response = await this.request({
            path: `/institutions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionFromJSON(jsonValue));
    }

    /**
     * 
     * /institutions/{id}
     */
    async getInstitution(requestParameters: GetInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institution> {
        const response = await this.getInstitutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * /institutions
     */
    async getInstitutionsRaw(requestParameters: GetInstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institutions>> {
        const queryParameters: any = {};

        if (requestParameters['apiKey'] != null) {
            queryParameters['api_key'] = requestParameters['apiKey'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['group_by'] = requestParameters['groupBy'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['sample'] != null) {
            queryParameters['sample'] = requestParameters['sample'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['seed'] != null) {
            queryParameters['seed'] = requestParameters['seed'];
        }

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['mailto'] != null) {
            queryParameters['mailto'] = requestParameters['mailto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        const response = await this.request({
            path: `/institutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionsFromJSON(jsonValue));
    }

    /**
     * 
     * /institutions
     */
    async getInstitutions(requestParameters: GetInstitutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institutions> {
        const response = await this.getInstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a random institution
     * /institutions/random
     */
    async getRandomInstitutionRaw(requestParameters: GetRandomInstitutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Institution>> {
        const queryParameters: any = {};

        if (requestParameters['select'] != null) {
            queryParameters['select'] = requestParameters['select'];
        }

        if (requestParameters['mailto'] != null) {
            queryParameters['mailto'] = requestParameters['mailto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['userAgent'] != null) {
            headerParameters['User-Agent'] = String(requestParameters['userAgent']);
        }

        const response = await this.request({
            path: `/institutions/random`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionFromJSON(jsonValue));
    }

    /**
     * Get a random institution
     * /institutions/random
     */
    async getRandomInstitution(requestParameters: GetRandomInstitutionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Institution> {
        const response = await this.getRandomInstitutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
